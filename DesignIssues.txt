Issues with the prototype design
================================

1. How the API works
====================

The core API is very simple, but there are a number of issues that
haven't been fully resolved for which additional input would be very
helpful.

The basic JKstat methods are:

getKstats
getKstat
getKCID


The KstatFilter class works extremely well. It's slightly ugly in that
the instance is passed as an Integer rather than an int, but that's to
allow null values. Is this a problem?


We never call kstat_close. Are there use cases where this would be
useful?


Currently we throw essentially no exceptions, except for the
client. Should we?


Should we worry about supporting UINT64 properly? The problem is that I
use a long, which is signed.


2. Demos
========

Several of the demo applications are built using JTable. The reason for
doing so was to avoid having to write a table implementation myself
(the original jiostat was hard work), and you can support sorting very
easily and get column re-ordering for free.

However, the demos don't look that good. The default JTable cell
display looks fairly ordinary, there's no consistent rounding to a
fixed format, and there's no graphical display - you just get the
text.

So, for those demos currently using a JTable, should the JTable be
replaced by a custom implementation, or should the JTable still be used
and a custom cell renderer developed to improve the display?


3. Accessories
==============

What calls the accessory registry? Can this be streamlined?


4. Client-Server
================

This is an area that's clearly in flux. However, the basic design and
principle seems solid enough. Using JSON as the serialization format
has solved the main problem with using XML-RPC, as it obviates the need
to use vendor extensions.


5. JNI and classloaders
=======================

From Fabrice Bacchella:

In uk/co/petertribble/jkstat/api/NativeJKstat.java

 static {
     System.loadLibrary("kstat_jni");
     cacheids(); // native JKstat ref prevents class from being unloaded
 }

But if this library is already loaded it fails. I think it might prevent the reload in a war application. And it's not possible to write a wrapper that will automatically detect the path to kstat_jni and preload it.
You should catch exceptions like :
Exception in thread "main" java.lang.UnsatisfiedLinkError: Native Library /opt/jkstat/lib/i386/libkstat_jni.so already loaded in another classloader
and ignore it.

This is a tricky area, and needs more thought.
